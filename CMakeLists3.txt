set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/custom_cmake_modules")

message("**** configuring KratosIsogeometricApplication ****")

################### PYBIND11
include(pybind11Tools)

# kratos_add_dependency(${CMAKE_CURRENT_SOURCE_DIR}/../structural_application)

include_directories( ${CMAKE_SOURCE_DIR}/kratos )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/.. )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/../brep_application )

add_definitions(-DSD_APP_FORWARD_COMPATIBILITY)
add_definitions(-DKRATOS_SD_REF_NUMBER_3)

# add_subdirectory(custom_external_libraries/geomod)
add_subdirectory(custom_external_libraries/tetgen1.5.0)
add_definitions( -DISOGEOMETRIC_USE_TETGEN )
# add_definitions( -DENABLE_BEZIER_GEOMETRY ) # this was promoted to system level
# add_definitions( -DENABLE_PRECOMPUTE )

set(ISOGEOMETRIC_USE_MPI FALSE)
if(DEFINED ISOGEOMETRIC_PARMETIS_ROOT)
    INCLUDE_DIRECTORIES(${ISOGEOMETRIC_PARMETIS_ROOT}/include)
    FIND_LIBRARY(METIS_FOR_IGA_LIBRARY metis "${ISOGEOMETRIC_PARMETIS_ROOT}/lib" NO_DEFAULT_PATH)
    FIND_LIBRARY(PARMETIS_FOR_IGA_LIBRARY parmetis "${ISOGEOMETRIC_PARMETIS_ROOT}/lib" NO_DEFAULT_PATH)
    set(ISOGEOMETRIC_USE_MPI TRUE)
    add_definitions(-DISOGEOMETRIC_USE_PARMETIS)
    add_definitions(-DISOGEOMETRIC_USE_MPI)
endif()

set(ISOGEOMETRIC_USE_GISMO FALSE)
if(DEFINED GISMO_ROOT)
    INCLUDE_DIRECTORIES(${GISMO_ROOT}/include)
    INCLUDE_DIRECTORIES(${GISMO_ROOT}/include/gismo)
    FIND_LIBRARY(GISMO_LIBRARY gismo PATHS ${GISMO_ROOT}/lib NO_DEFAULT_PATH)
    set(ISOGEOMETRIC_USE_GISMO TRUE)
    add_definitions(-DISOGEOMETRIC_USE_GISMO)
endif()

set(ISOGEOMETRIC_USE_TSPLINE FALSE)
if(DEFINED TSPLINE_DIR)
    FIND_PACKAGE(TSPLINE QUIET)
    if(TSPLINE_FOUND MATCHES "YES")
        message("TSPLINE_LIBRARIES:" ${TSPLINE_LIBRARIES})
        INCLUDE_DIRECTORIES(${TSPLINE_INCLUDE_DIR})
        set(ISOGEOMETRIC_USE_TSPLINE TRUE)
        add_definitions(-DISOGEOMETRIC_USE_TSPLINE)
    endif()
endif()

if(${ISOGEOMETRIC_USE_BREP} MATCHES ON)
    include_directories( ${CMAKE_SOURCE_DIR}/applications/brep_application)
    add_definitions(-DISOGEOMETRIC_USE_BREP)
endif()

if(EXISTS ${CMAKE_SOURCE_DIR}/kratos/solving_strategies/builder_and_solvers/residualbased_elimination_builder_and_solver_deactivation.h)
    add_definitions(-D_residualbased_elimination_builder_and_solver_deactivation_existed_)
endif()

FIND_PACKAGE(CGAL QUIET)
if(CGAL_FOUND)
    # SET(CGAL_DIR ${CGAL_ROOT}/lib/CGAL)
    add_definitions(-DISOGEOMETRIC_APPLICATION_USE_CGAL)
    add_definitions(-DISOGEOMETRIC_APPLICATION_USE_GMP)
    INCLUDE_DIRECTORIES(${CGAL_INCLUDE_DIR})
    message(STATUS "CGAL is found at " ${CGAL_ROOT} " and enabled for IsogeometricApplication")
else()
    message(STATUS "CGAL is not found and linked with IsogeometricApplication")
endif()

#add_definitions(-DISOGEOMETRIC_DEBUG_DESTROY)

set( KRATOS_ISOGEOMETRIC_APPLICATION_CORE
    #    ${PROJECT_SOURCE_DIR}/kratos/sources/io.cpp
#    ${PROJECT_SOURCE_DIR}/kratos/sources/model_part_io.cpp
#    ${CMAKE_CURRENT_SOURCE_DIR}/custom_io/bezier_model_part_io.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/bezier_utils.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/bspline_utils.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/bezier_post_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bsplines_indexing_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bsplines_fespace.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bcell_manager.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/domain_manager_2d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/domain_manager_3d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/hbsplines/deprecated_hb_basis_function.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/hbsplines/deprecated_hb_mesh.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/tsplines/tsvertex.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/tsplines/tsmesh_2d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/import_export/multi_nurbs_patch_geo_importer.cpp
)

if(${ISOGEOMETRIC_USE_TSPLINE} MATCHES TRUE)
    set( KRATOS_ISOGEOMETRIC_APPLICATION_CORE
        ${KRATOS_ISOGEOMETRIC_APPLICATION_CORE}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/import_export/tsplines_patch_tsm_importer.cpp
       )
endif()

set( KRATOS_ISOGEOMETRIC_APPLICATION_CORE
    ${KRATOS_ISOGEOMETRIC_APPLICATION_CORE}
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_elements/dummy_isogeometric_element.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_conditions/dummy_isogeometric_condition.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/isogeometric_application_variables.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/isogeometric_application.cpp
)

if(${ISOGEOMETRIC_USE_BREP} MATCHES ON)
    set( KRATOS_ISOGEOMETRIC_APPLICATION_CORE
        ${KRATOS_ISOGEOMETRIC_APPLICATION_CORE}
        ${CMAKE_CURRENT_SOURCE_DIR}/isogeometric_brep_application.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_brep_and_level_set_to_python.cpp
    )
endif()

## Isogeometric testing sources
if(${KRATOS_BUILD_TESTING} MATCHES ON)
    file(GLOB_RECURSE KRATOS_ISOGEOMETRIC_APPLICATION_TESTING_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/tests_python3/*.cpp)
endif(${KRATOS_BUILD_TESTING} MATCHES ON)

## Isogeometric python interface sources
set(KRATOS_ISOGEOMETRIC_APPLICATION_PYTHON_INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_io_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_processes_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_backend_utilities_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_frontend_utilities_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_control_point_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_control_grids_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_nurbs_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_pbbsplines_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_hbsplines_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_tsplines_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_mesh_and_model_part_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_patches_to_python.cpp
    # ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/add_strategies_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python3/isogeometric_python_application.cpp
)

if(${ISOGEOMETRIC_USE_BREP} MATCHES ON)
    set( KRATOS_ISOGEOMETRIC_APPLICATION_PYTHON_INTERFACE
        ${KRATOS_ISOGEOMETRIC_APPLICATION_PYTHON_INTERFACE}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/isogeometric_brep_python_application.cpp
    )
endif()

add_library(KratosIsogeometricCore SHARED ${KRATOS_ISOGEOMETRIC_APPLICATION_CORE} ${KRATOS_ISOGEOMETRIC_APPLICATION_TESTING_SOURCES})
target_link_libraries(KratosIsogeometricCore PUBLIC KratosCore)
target_link_libraries(KratosIsogeometricCore PRIVATE iga_tetgen150)
if(${ISOGEOMETRIC_USE_MPI} MATCHES TRUE)
    target_link_libraries(KratosIsogeometricCore PRIVATE ${METIS_FOR_IGA_LIBRARY})
    target_link_libraries(KratosIsogeometricCore PRIVATE ${PARMETIS_FOR_IGA_LIBRARY})
    target_link_libraries(KratosIsogeometricCore PRIVATE ${MPI_LIBRARIES})
endif()
if(${ISOGEOMETRIC_USE_GISMO} MATCHES TRUE)
    target_link_libraries(KratosIsogeometricCore PRIVATE ${GISMO_LIBRARY})
endif()
if(${ISOGEOMETRIC_USE_TSPLINE} MATCHES TRUE)
    target_link_libraries(KratosIsogeometricCore PRIVATE ${TSPLINE_LIBRARIES})
endif()
if(CGAL_FOUND)
    target_link_libraries(KratosIsogeometricCore PRIVATE ${CGAL_LIBRARIES})
    target_link_libraries(KratosIsogeometricCore PRIVATE ${GMP_LIBRARIES})
endif()
set_target_properties(KratosIsogeometricCore PROPERTIES COMPILE_DEFINITIONS "ISOGEOMETRIC_APPLICATION=EXPORT,API")

###############################################################
## define library Kratos which defines the basic python interface
pybind11_add_module(KratosIsogeometricApplication MODULE THIN_LTO ${KRATOS_ISOGEOMETRIC_APPLICATION_PYTHON_INTERFACE})
target_link_libraries(KratosIsogeometricApplication PRIVATE KratosIsogeometricCore)
set_target_properties(KratosIsogeometricApplication PROPERTIES PREFIX "")

#add_subdirectory(tests)

# changing the .dll suffix to .pyd (Windows)
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosIsogeometricApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

# changing the .dylib suffix to .so (OS X)
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set_target_properties(KratosIsogeometricApplication PROPERTIES SUFFIX .so)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

# # Cotire
# if(USE_COTIRE MATCHES ON)
#     cotire(KratosIsogeometricCore)
#     cotire(KratosIsogeometricApplication)
# endif(USE_COTIRE MATCHES ON)

# Add to the KratosMultiphisics Python module
kratos_python_install(${INSTALL_PYTHON_USING_LINKS} ${CMAKE_CURRENT_SOURCE_DIR}/IsogeometricApplication3.py KratosMultiphysics/IsogeometricApplication/__init__.py )

# Install python files
kratos_python_install_directory(${INSTALL_PYTHON_USING_LINKS} ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts3 KratosMultiphysics/IsogeometricApplication )

# Kratos Testing. Install everything except sources to ensure that reference and configuration files are copied.
if(${INSTALL_TESTING_FILES} MATCHES ON )
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests_python3 DESTINATION applications/IsogeometricApplication
        PATTERN "*.git" EXCLUDE
        PATTERN "*.c" EXCLUDE
        PATTERN "*.h" EXCLUDE
        PATTERN "*.cpp" EXCLUDE
        PATTERN "*.hpp" EXCLUDE
  )
endif(${INSTALL_TESTING_FILES} MATCHES ON)

# Install targets
install(TARGETS KratosIsogeometricCore DESTINATION libs )
install(TARGETS KratosIsogeometricApplication DESTINATION libs )
